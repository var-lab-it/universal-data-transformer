<?xml version="1.0"?>
<ruleset name="var-lab">
    <description>var-lab Coding Standard</description>

    <rule ref="MO4">
        <!-- disable single line function signatures -->
        <exclude name="Symfony.Functions.Arguments"/>
        <exclude name="Symfony.Commenting.Annotations"/>
        <!-- disable function comments -->
        <exclude name="Symfony.Commenting.FunctionComment" />
        <!-- Exclude conflicting rules -->
        <exclude name="PSR12.Files.OpenTag.NotAlone" />
        <exclude name="PSR12.Files.FileHeader.SpacingAfterBlock" />
        <!-- https://github.com/mayflower/mo4-coding-standard/issues/167 -->
        <exclude name="PSR12.Files.FileHeader.IncorrectGrouping" />
        <!-- Excludes one of the two yoda-comparators -->
        <exclude name="Symfony.ControlStructure.YodaConditions.Invalid" />
        <!-- Typed properties are used now -->
        <exclude name="MO4.Commenting.PropertyComment" />
        <!-- until https://github.com/squizlabs/PHP_CodeSniffer/pull/3334 gets in, we include a patched version -->
        <exclude name="Squiz.WhiteSpace.MemberVarSpacing" />
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter" />
    </rule>

    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="140" />
            <property name="absoluteLineLimit" value="140" />
        </properties>
    </rule>

    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1" />
        </properties>
    </rule>

    <!-- forbid is_null(), maybe replace with mediawiki/mediawiki-codesniffer IsNullSniff -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array" value="is_null=>null"/>
        </properties>
    </rule>

    <!-- require strict types -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="declareOnFirstLine" value="false" />
            <property name="spacesCountAroundEqualsSign" value="0" />
            <property name="linesCountBeforeDeclare" value="1" />
            <property name="linesCountAfterDeclare" value="1" />
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.ControlStructures.RequireYodaComparison">
    </rule>

    <!-- configure doc comment order -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBeforeFirstContent" value="0"/>
            <property name="linesCountAfterLastContent" value="0"/>
            <property name="linesCountBetweenDescriptionAndAnnotations" value="1"/>
            <property name="linesCountBetweenAnnotationsGroups" value="1"/>
            <property name="annotationsGroups" type="array">
                <element value="
                    @internal,
                    @deprecated,
                "/>
                <element value="@template"/>
                <element value="
                    @dataProvider,
                    @link,
                    @see,
                    @uses,
                "/>
                <element value="
                    @Assert\,
                    @Constraints\,
                "/>
                <element value="@ORM\"/>
                <element value="
                    @ApiFilter,
                    @ApiResource,
                    @Groups,
                "/>
                <element value="@var"/>
                <element value="@param"/>
                <element value="@return"/>
                <element value="@throws"/>
            </property>
        </properties>
    </rule>

    <!-- forbid empty comments-->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment" />
    <!-- forbid useless comments-->
    <rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment" />
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint.UselessAnnotation">
        <severity>9</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint.UselessAnnotation">
        <severity>9</severity>
    </rule>

    <!-- require typed properties -->
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint" />
    <!-- covered by PHPStan -->
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification">
        <severity>0</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable" />
    <!-- require Throwable instead of Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly" />
    <!-- forbid static:: in final class -->
    <rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding" />

    <!-- Rules for recent language features -->
    <rule ref="SlevomatCodingStandard.TypeHints.UnionTypeHintFormat" />
    <rule ref="SlevomatCodingStandard.Exceptions.RequireNonCapturingCatch" />
    <rule ref="SlevomatCodingStandard.Classes.RequireConstructorPropertyPromotion" />
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceEqualOperator" />
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullSafeObjectOperator" />
    <rule ref="SlevomatCodingStandard.Functions.ArrowFunctionDeclaration" />
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall" />
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration" />
</ruleset>
